package gui;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.Timer;;

class TimerJLabel extends JLabel{

	private Timer t;
	private long elapsedMilli;
	private boolean isBlink = false;

	TimerJLabel() {

		this.setHorizontalAlignment(CENTER);
		this.setIcon(new ImageIcon(MainView.class.getResource("/resources/k-timer-icon.png")));
		this.setFont(new Font(getFont().getName(), Font.PLAIN, 20));

		t = new Timer(1000, new clockListener());
		t.setInitialDelay(0);
		start();
	}

	void start() {
		elapsedMilli = 0;
		resume();
	}

	void pause() {
		elapsedMilli = calcElapsedMilli(); // freeze elapsed time counting
		isBlink = true;		
	}
	
	void resume() {
		isBlink = false;
	}

	void reset() {
		t.restart();
	}

	private String getElapsedTime() {
		elapsedMilli = calcElapsedMilli();
		long hr = TimeUnit.MILLISECONDS.toHours(elapsedMilli);
		long min = TimeUnit.MILLISECONDS.toMinutes(elapsedMilli - TimeUnit.HOURS.toMillis(hr));
		long sec = TimeUnit.MILLISECONDS.toSeconds(elapsedMilli - TimeUnit.HOURS.toMillis(hr) - TimeUnit.MINUTES.toMillis(min));
		return String.format("%02d:%02d:%02d", hr,min,sec);				
	}

	private long calcElapsedMilli() {
		return new Date().getTime() - elapsedMilli;
	}
	
	private class clockListener implements ActionListener {
		private boolean isForeground = false;
		private Color fg = TimerJLabel.this.getBackground();
		private Color bg = TimerJLabel.this.getForeground()();
		@Override
		public void actionPerformed(ActionEvent e) {
			if (!isBlink) { //regular mode
				if (isForeground) { // return to show label if needed
					TimerJLabel.this.setForeground(bg);
					isForeground = false;
				}
				TimerJLabel.this.setText(getElapsedTime());
			}
			else { // blinking
				if (!isForeground) { // text is not in background color
					TimerJLabel.this.setForeground(TimerJLabel.this.getBackground());
					isForeground = true;
				}
				else 
			}
		}

	}
}
