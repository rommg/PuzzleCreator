package gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.BoxLayout;
import javax.swing.JButton;

import Utils.AlgorithmUtils;
import Utils.Logger;

import puzzleAlgorithm.AlgorithmRunner;
import puzzleAlgorithm.BoardSolution;
import puzzleAlgorithm.PuzzleDefinition;
import puzzleAlgorithm.PuzzleSquare;

import java.awt.event.ActionListener;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.awt.BorderLayout;


public class CrosswordView extends JPanel {

	private TimerJLabel timer;
	private JButton btnPause;
	private boolean isPaused = false;
	private JPanel boardPanel;
	private Map<Integer, Map<Integer,List<PuzzleDefinition>>> boardDefs;
	private JPanel[][] boardPanelHolders;

	static JPanel start() {
		CrosswordView view = new CrosswordView();
		@SuppressWarnings("unused")
		CrosswordController controller = new CrosswordController(null, view);
		return view;
	}
	/**
	 * Create the frame.
	 */
	public CrosswordView() {
		initialize();
		this.setVisible(true);
	}

	private void initialize() {
		
		setLayout(new BorderLayout(0, 0));

		JPanel timerPanel = new JPanel();

		timer = new TimerJLabel();
		timerPanel.add(timer);
		timer.start();
		add(timerPanel, BorderLayout.NORTH);

		boardPanel = new JPanel();
		add(boardPanel, BorderLayout.CENTER);

		JPanel BtnPanel = new JPanel();
		add(BtnPanel, BorderLayout.SOUTH);

		JButton btnCheck = new JButton("Check");

		btnPause = new JButton("Pause");
		btnPause.setPreferredSize(new Dimension(100, btnPause.getPreferredSize().height + 10));
		BtnPanel.add(btnPause);
		BtnPanel.add(btnCheck);

		JButton btnDone = new JButton("Done");
		BtnPanel.add(btnDone);
		
		System.out.println("end crossword view");
		CrosswordModel.getBoardSolutionAndDraw(this);
		
	}

	void drawBoard(PuzzleSquare[][] board, List<PuzzleDefinition> definitions) {
		int size = board.length;
		boardPanelHolders = new JPanel[size][size];
		int[][] boardDefNum = new int[size][size];
		boardDefs =  new HashMap<Integer, Map<Integer, List<PuzzleDefinition>>>();

		// init
		for (int i = 0; i<size; i++) {
			for (int j=0; j<board[i].length; j++) {
				boardDefNum[i][j] = 0;
				boardPanelHolders[i][j] = new JPanel();	
				boardDefs.put(new Integer(i), new HashMap<Integer, ArrayList<PuzzleDefinition>)());
				.put(j, new ArrayList<PuzzleDefinition>());
			}
		}

		//count number of definitions in each square
		for (PuzzleDefinition definition : definitions) {
			int row = definition.getTextRow();
			int col = definition.getTextCol();

			boardDefNum[row][col]++; 
			boardDefs.get(row).get(col).add(definition);
		}

		// split definitions cells with two definitions, color cells
		for (int i = 0; i<size; i++) {
			for (int j=0; j<board[i].length; j++) {
				JPanel currentPanel = boardPanelHolders[i][j]; 
				switch (boardDefNum[i][j]) {
				case 0 : { // regular square
					currentPanel.setBackground(Color.WHITE);
					JTextField txtLbl = new JTextField(1);
					txtLbl.setBackground(currentPanel.getBackground());
					txtLbl.setForeground(Color.BLACK);
					currentPanel.add(txtLbl);
					break;
				}
				case 1:  {
					//definition square with one definition
					JLabel lbl = createDefinitionLabel(i, j,0);
					currentPanel.add(lbl);
					break;
				}
				case 2: { // definition square with two definitions
					currentPanel.setLayout(new GridLayout(2,1));
					JLabel lbl1 = createDefinitionLabel(i, j,0);
					JLabel lbl2= createDefinitionLabel(i, j, 1);

					PuzzleDefinition def1 = boardDefs.get(i).get(j).get(0);
					PuzzleDefinition def2 = boardDefs.get(i).get(j).get(1);

					if (isDefinitionTop(def1, i)) {
						currentPanel.add(lbl1);
						currentPanel.add(lbl2);
					}
					else {
						if (isDefinitionBottom(def1, i)) {
							currentPanel.add(lbl2);
							currentPanel.add(lbl1);
						}
						else {
							if (isDefinitionTop(def2, i)) {
								currentPanel.add(lbl2);
								currentPanel.add(lbl1);
							}
							else {
								if (isDefinitionBottom(def2, i)) {
									currentPanel.add(lbl1);
									currentPanel.add(lbl2);
								}
								else { // random
									currentPanel.add(lbl1);
									currentPanel.add(lbl2);
								}
							}
						}
					}
					break;
				}
				default : {
					Logger.writeErrorToLog("Invalid sqaure to draw: Definition sqaure may have up to 2 definitions.");
				}
				}
			}
		}
		
		boardPanel.setLayout(new GridLayout(size, size));

		//add panels to boardPanel in right order
		for (int i = 0; i<size; i++){
			for (int j=0; j<size; j++) {
				boardPanel.add(boardPanelHolders[i][j]);
			}
		}
	}
	
	private void drawArrows() {
		
	}

	private boolean isDefinitionTop(PuzzleDefinition def, int row) {
		return (def.getBeginRow() == row - 1);
	}

	private boolean isDefinitionBottom(PuzzleDefinition def, int row) {
		return (def.getBeginRow() == row + 1);
	}

	private JLabel createDefinitionLabel(int i,int j, int defNum) {
		JLabel lbl = new JLabel("<html><p>" + boardDefs.get(i).get(j).get(defNum) + "</p></html>");
		lbl.setForeground(Color.LIGHT_GRAY);
		lbl.setForeground(Color.BLACK);
		return lbl;
	}



	void pause() {
		if (!isPaused) {
			timer.pause();
			isPaused = true;
			btnPause.setText("Resume");
			boardPanel.setEnabled(false);
		}
		else {
			timer.resume();
			isPaused = false;
			btnPause.setText("Pause");
			boardPanel.setEnabled(true);
		}
	}


	void addPauseListener(ActionListener listener) {
		btnPause.addActionListener(listener);
	}
}
